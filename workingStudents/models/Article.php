<?php

namespace app\models;


use Yii;
use yii\data\Pagination;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "article".
 *
 * @property int $id
 * @property string $title
 * @property string $description
 * @property string $content
 * @property string $date
 * @property string $image
 * @property int $viewed
 * @property int $user_id
 * @property int $status
 * @property int $category_id
 *
 * @property ArtCategory $category
 * @property User $user
 * @property ArticleTag[] $articleTags
 */
class Article extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['description', 'content'], 'string'],
            [['date'], 'safe'],
            [['viewed', 'user_id', 'status', 'category_id'], 'integer'],
            [['title', 'image'], 'string', 'max' => 255],
            [['category_id'], 'exist', 'skipOnError' => true, 'targetClass' => ArtCategory::className(), 'targetAttribute' => ['category_id' => 'id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'description' => 'Description',
            'content' => 'Content',
            'date' => 'Date',
            'image' => 'Image',
            'viewed' => 'Viewed',
            'user_id' => 'User ID',
            'status' => 'Status',
            'category_id' => 'Category ID',
        ];
    }

    public function saveImage($filename)
	{
		$this->image = $filename;
		return $this->save(false);
	}

	public function getImage()
	{
		return ($this->image) ? '/uploads/' . $this->image : '/no-image.png';
	}

	public function deleteImage()
	{
		$imageUploadModel = new ImageUpload();
		$imageUploadModel->deleteCurrentImage($this->image);
	}
	
	public function beforeDelete()
	{
		$this->deleteImage();
		return parent::beforeDelete(); // TODO: Change the autogenerated stub
	}
	
	
	public function getTags()
	{
		return $this->hasMany(Tag::className(), ['id' => 'tag_id'])
		->viaTable('article_tag', ['article_id' => 'id']);
	}

	public function getSelectedTags()
	{
		$selectedIds = $this->getTags()->select('id')->asArray()->all();
		return ArrayHelper::getColumn($selectedIds, 'id');
	}

	public function saveTags($tags)
	{
		if (is_array($tags)) {
			$this->clearCurrentTags();

			foreach ($tags as $tag_id) {
				$tag = Tag::findOne($tag_id);
				$this->link('tags', $tag);
			}
		}
	}

	public function clearCurrentTags()
	{
		ArticleTag::deleteAll(['article_id'=>$this->id]);
	}
	
	public function getTagArticles()
	{
		return $this->hasMany(ArticleTag::className(), ['article_id' => 'id']);
	}

	public function getArticles()
	{
		return ArrayHelper::getColumn(
		$this->getTagArticles()->all(), 'category_id'
		);
	}
	
	public static function getAll($pageSize = 5)
	{
		// build a DB query to get all articles
		$query = Article::find();

		// get the total number of articles (but do not fetch the article data yet)
		$count = $query->count();

		// create a pagination object with the total count
		$pagination = new Pagination(['totalCount' => $count, 'pageSize'=>$pageSize]);

		// limit the query using the pagination and retrieve the articles
		$articles = $query->offset($pagination->offset)
		->limit($pagination->limit)
		->all();

		$data['articles'] = $articles;
		$data['pagination'] = $pagination;

		return $data;
	}

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(ArtCategory::className(), ['id' => 'category_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getArticleTags()
    {
        return $this->hasMany(ArticleTag::className(), ['article_id' => 'id']);
    }
}
